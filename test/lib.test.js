'use strict';

const { test, equal, ok } = require('tap');
const lib = require('r-assign/lib');

const methods = 57;

const inLib = (method) => ok(method in lib);

test('rAssign lib exports', ({ end }) => {
	equal(Object.keys(lib).length, methods);
	inLib('getAny');
	inLib('getAnyNumber');
	inLib('getArrayOf');
	inLib('getBigInt');
	inLib('getBoolean');
	inLib('getInstanceOf');
	inLib('getIntersectionOf');
	inLib('getLiteral');
	inLib('getLiteralOf');
	inLib('getNull');
	inLib('getNullable');
	inLib('getNumber');
	inLib('getObjectOf');
	inLib('getOptional');
	inLib('getStrictObjectOf');
	inLib('getString');
	inLib('getSymbol');
	inLib('getTupleOf');
	inLib('getUnionOf');
	inLib('isAny');
	inLib('isAnyNumber');
	inLib('isArrayOf');
	inLib('isBigInt');
	inLib('isBoolean');
	inLib('isInstanceOf');
	inLib('isIntersectionOf');
	inLib('isLiteral');
	inLib('isLiteralOf');
	inLib('isNull');
	inLib('isNullable');
	inLib('isNumber');
	inLib('isObjectOf');
	inLib('isOptional');
	inLib('isStrictObjectOf');
	inLib('isString');
	inLib('isSymbol');
	inLib('isTupleOf');
	inLib('isUnionOf');
	inLib('parseAny');
	inLib('parseAnyNumber');
	inLib('parseArrayOf');
	inLib('parseBigInt');
	inLib('parseBoolean');
	inLib('parseInstanceOf');
	inLib('parseIntersectionOf');
	inLib('parseLiteral');
	inLib('parseLiteralOf');
	inLib('parseNull');
	inLib('parseNullable');
	inLib('parseNumber');
	inLib('parseObjectOf');
	inLib('parseOptional');
	inLib('parseStrictObjectOf');
	inLib('parseString');
	inLib('parseSymbol');
	inLib('parseTupleOf');
	inLib('parseUnionOf');
	end();
});